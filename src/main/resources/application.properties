#Now update your application.properties:
propertiesspring.application.name=tariffg4t2
spring.jackson.deserialization.fail-on-unknown-properties=false

# --- PostgreSQL RDS connection ---
spring.datasource.url=${DB_URL}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

# --- JPA / Hibernate Settings ---
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Fix for PostgreSQL prepared statement issues
spring.datasource.hikari.data-source-properties.prepStmtCacheSize=0
spring.datasource.hikari.data-source-properties.useServerPrepStmts=false
spring.datasource.hikari.auto-commit=false


#Fix for PostgreSQL prepared statement issues

#Uncomment this part
#spring.jpa.properties.hibernate.jdbc.use_sql_comments=false
#spring.jpa.properties.hibernate.jdbc.batch_size=0

#Or this part
#spring.jpa.properties.hibernate.jdbc.batch_versioned_data=true
#spring.jpa.properties.hibernate.order_inserts=true
#spring.jpa.properties.hibernate.order_updates=true

# HikariCP settings
spring.datasource.hikari.maximum-pool-size=5
spring.datasource.hikari.minimum-idle=1
spring.datasource.hikari.connection-timeout=20000
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.max-lifetime=900000
spring.datasource.hikari.leak-detection-threshold=0
spring.datasource.hikari.connection-test-query=SELECT 1

# Python microservice configuration
python.scraper.url=http://localhost:5001/scrape

# Web scraping configuration
scraping.delay-ms=2000
scraping.user-agent=TariffBot/1.0
scraping.timeout-ms=10000

# OpenAI API configuration (still needed for other services)
openai.api.key=${OPENAI_API_KEY}
openai.api.url=https://api.openai.com/v1/chat/completions

